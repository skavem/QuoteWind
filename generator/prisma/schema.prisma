generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id             Int       @id @default(autoincrement())
  full_name      String    @unique
  name           String    @unique
  index          Int       @unique
  divider_before String?
  Chapter        Chapter[]
}

model Chapter {
  id      Int     @id @default(autoincrement())
  book_id Int
  index   Int
  Book    Book    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Verse   Verse[]
}

model Verse {
  id         Int                      @id @default(autoincrement())
  chapter_id Int
  index      Int
  text       String
  fts        Unsupported("tsvector")?
  State      State[]
  Chapter    Chapter                  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([fts], map: "verses_fts", type: Gin)
}

model Song {
  id      Int                      @id @default(autoincrement())
  name    String                   @unique
  label   String                   @unique
  fts     Unsupported("tsvector")?
  Couplet Couplet[]

  @@index([fts], map: "songs_fts", type: Gin)
}

model Couplet {
  id      BigInt                   @id @default(autoincrement())
  song_id Int
  label   String?
  text    String?
  index   Int
  fts     Unsupported("tsvector")?
  Song    Song                     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  State   State[]

  @@unique([song_id, index])
  @@index([fts], map: "couplets_fts", type: Gin)
}

model State {
  id         BigInt   @id @default(autoincrement())
  couplet_id BigInt?
  verse_id   Int?
  styles     Json?    @db.Json
  Couplet    Couplet? @relation(fields: [couplet_id], references: [id], onUpdate: NoAction)
  Verse      Verse?   @relation(fields: [verse_id], references: [id], onUpdate: NoAction)
}
